# coding: utf-8

"""
    NanoNets

    Welcome to the NanoNets API! You can use our API to build custom deep learning models for images.<br/> We have language bindings in Shell, Ruby, Golang, Java, C# and Python! You can view code examples in the dark area to the right, and you can switch the programming language for the examples with the tabs in the top right. <br/> In the documentation, you will find ready to fire code samples in these languages as well as detailed API specs for different endpoints.<br/> # Model Object A model Object has 3 attributes<br/> ### model_id <b>Definition:</b> Unique Id for the model <br/><br/> ### model_type <b>Definition:</b> Type of model. Possible values are: <br/> <table>     <tr>         <td>classification</td>         <td>Image classification model</td>     </tr>     <tr>         <td>localization</td>         <td>Object detection model</td>     </tr>     <tr>         <td>multilabelclassification</td>         <td>Multi label image classification model</td>     </tr>     <tr>         <td>ocr</td>         <td>OCR model</td>     </tr> </table> <br/>  ### state <b>Definition:</b>Current state of model. Possible values are::<br/> <table>     <tr>         <td>-1</td>         <td>Error in model training</td>     </tr>     <tr>         <td>0</td>         <td>Model created. No training data uploaded yet</td>     </tr>     <tr>         <td>1</td>         <td>Training data uploaded. Need to annotate data</td>     </tr>     <tr>         <td>2</td>         <td>Training data annotated. Need to start training</td>     </tr>     <tr>         <td>3</td>         <td>Model in training queue</td>     </tr>     <tr>         <td>4</td>         <td>Model currently training</td>     </tr>     <tr>         <td>5</td>         <td>Model hosted. Can be used for prediction</td>     </tr> </table>   # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@nanonets.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Bndbox(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'xmin': 'int',
        'ymin': 'int',
        'xmax': 'int',
        'ymax': 'int'
    }

    attribute_map = {
        'xmin': 'xmin',
        'ymin': 'ymin',
        'xmax': 'xmax',
        'ymax': 'ymax'
    }

    def __init__(self, xmin=None, ymin=None, xmax=None, ymax=None):  # noqa: E501
        """Bndbox - a model defined in Swagger"""  # noqa: E501
        self._xmin = None
        self._ymin = None
        self._xmax = None
        self._ymax = None
        self.discriminator = None
        self.xmin = xmin
        self.ymin = ymin
        self.xmax = xmax
        self.ymax = ymax

    @property
    def xmin(self):
        """Gets the xmin of this Bndbox.  # noqa: E501


        :return: The xmin of this Bndbox.  # noqa: E501
        :rtype: int
        """
        return self._xmin

    @xmin.setter
    def xmin(self, xmin):
        """Sets the xmin of this Bndbox.


        :param xmin: The xmin of this Bndbox.  # noqa: E501
        :type: int
        """
        if xmin is None:
            raise ValueError("Invalid value for `xmin`, must not be `None`")  # noqa: E501

        self._xmin = xmin

    @property
    def ymin(self):
        """Gets the ymin of this Bndbox.  # noqa: E501


        :return: The ymin of this Bndbox.  # noqa: E501
        :rtype: int
        """
        return self._ymin

    @ymin.setter
    def ymin(self, ymin):
        """Sets the ymin of this Bndbox.


        :param ymin: The ymin of this Bndbox.  # noqa: E501
        :type: int
        """
        if ymin is None:
            raise ValueError("Invalid value for `ymin`, must not be `None`")  # noqa: E501

        self._ymin = ymin

    @property
    def xmax(self):
        """Gets the xmax of this Bndbox.  # noqa: E501


        :return: The xmax of this Bndbox.  # noqa: E501
        :rtype: int
        """
        return self._xmax

    @xmax.setter
    def xmax(self, xmax):
        """Sets the xmax of this Bndbox.


        :param xmax: The xmax of this Bndbox.  # noqa: E501
        :type: int
        """
        if xmax is None:
            raise ValueError("Invalid value for `xmax`, must not be `None`")  # noqa: E501

        self._xmax = xmax

    @property
    def ymax(self):
        """Gets the ymax of this Bndbox.  # noqa: E501


        :return: The ymax of this Bndbox.  # noqa: E501
        :rtype: int
        """
        return self._ymax

    @ymax.setter
    def ymax(self, ymax):
        """Sets the ymax of this Bndbox.


        :param ymax: The ymax of this Bndbox.  # noqa: E501
        :type: int
        """
        if ymax is None:
            raise ValueError("Invalid value for `ymax`, must not be `None`")  # noqa: E501

        self._ymax = ymax

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Bndbox, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Bndbox):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
